@{
    ViewBag.Title = "BindingHandler";
}

<div class="panel panel-info" id="bindinghandler">
    <div class="panel-heading">
        <h3>
            Binding Handler Demo
        </h3>
    </div>
    <div class="panel-body">

        <label>
            Text editor:
        </label>
        <textarea data-bind="ckeditor: htmltext, valueUpdate: 'afterkeydown'"></textarea>

        <br />
        
    </div>
    <div class="panel-footer">

        <h3>Output JSON:</h3>
        <pre data-bind="text: JSON.stringify(ko.toJS($root), null, 2)">
        </pre>

    </div>
</div>

@section ExtraScripts
{
    <script>
        $(function () {
            // ---- ckeditor binding
            ko.bindingHandlers.ckeditor = {
                init: function (element, valueAccessor, allBindingsAccessor, context) {
                    var options = allBindingsAccessor().ckeditorOptions || {};
                    var modelValue = valueAccessor();
                    var value = ko.utils.unwrapObservable(valueAccessor());

                    $(element).html(value);
                    $(element).ckeditor();

                    var editor = $(element).ckeditorGet();

                    //handle edits made in the editor
                    editor.on('change', function (e) {
                        var self = this;
                        if (ko.isWriteableObservable(self)) {
                            self($(e.listenerData).val());
                        }
                    }, modelValue, element);

                    //handle disposal (if KO removes by the template binding)
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        if (editor) {
                            CKEDITOR.remove(editor);
                        };
                    });
                },
                update: function (element, valueAccessor, allBindingsAccessor, context) {
                    // handle programmatic updates to the observable
                    var newValue = ko.utils.unwrapObservable(valueAccessor());
                    if ($(element).ckeditorGet().getData() != newValue)
                        $(element).ckeditorGet().setData(newValue);
                }
            };

            function appViewModel() {
                var self = this;
                self.htmltext = ko.observable("");
            }

            var ele = document.getElementById("bindinghandler");
            var model = new appViewModel();
            ko.applyBindings(model, ele);

        });
    </script>
}

