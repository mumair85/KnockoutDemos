@{
    ViewBag.Title = "Validation";
}

<div class="panel panel-info" id="simpleValidation">
    <div class="panel-heading">
        <h3>Validation demo using Extender</h3>
    </div>
    <div class="panel-body">
        <label>Enter a numeric value:</label>
        <input data-bind="textInput: attemptedValue" />

        <br />

        <label class="error" data-bind="visible: !lastInputWasValid()">That's not a number!</label>

        <br />
        <br />

        Accepted value: <span data-bind="text: acceptedNumericValue"></span>

    </div>
    <div class="panel-footer">

        <h3>Output JSON:</h3>
        <pre data-bind="text: JSON.stringify(ko.toJS($root), null, 2)">
    </pre>

    </div>
</div>

<div class="panel panel-info" id="koValidation">
    <div class="panel-heading">
        <h3>Validation demo using KO-Validation Library</h3>
        <i>
            <a href="https://github.com/Knockout-Contrib/Knockout-Validation">https://github.com/Knockout-Contrib/Knockout-Validation</a> <b>(Check out WIKI)</b>
        </i>

    </div>
    <div class="panel-body">
        <label>String must start with 'u':</label>
        <input data-bind="value: attemptedValue" />

    </div>
    <div class="panel-footer">

        <h3>Output JSON:</h3>
        <pre data-bind="text: JSON.stringify(ko.toJS($root), null, 2)">
    </pre>

    </div>
</div>



@section ExtraScripts
{
    <script>
        $(function () {

            // KO validation
            function appViewModelSimple() {
                var self = this;

                self.acceptedNumericValue = ko.observable(123);
                self.lastInputWasValid = ko.observable(true);

                self.attemptedValue = ko.computed({
                    read: self.acceptedNumericValue,
                    write: function (value) {
                        if (isNaN(value))
                            self.lastInputWasValid(false);
                        else {
                            self.lastInputWasValid(true);
                            self.acceptedNumericValue(value);
                        }
                    }
                });

            }

            var ele = document.getElementById("simpleValidation");
            var modelSimple = new appViewModelSimple();
            ko.applyBindings(modelSimple, ele);






            // KO validation using library
            ko.validation.init({
                insertMessages: true
            });

            ko.validation.rules['mustStartWith'] = {
                validator: function (val, otherVal) {
                    return val.substring(0, 1) === otherVal;
                },
                message: 'The value must start with \'{0}\''
            };
            ko.validation.registerExtenders();

            function appViewModelKo() {
                var self = this;

                self.attemptedValue = ko.observable("").extend({ mustStartWith: 'u' });

            }

            var modelKo = new appViewModelKo();
            ko.applyBindings(modelKo, document.getElementById("koValidation"));




        });
    </script>
}
